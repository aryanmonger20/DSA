class Solution {
public:
    int longestCommonSubsequence(string s1, string s2) {
        int m=s1.size();
        int n=s2.size();
        
        int dp[m+1][n+1],i,j;
        
        for(i=0;i<=m;i++){
            for(j=0;j<=n;j++){
                if(i==0||j==0)
                    dp[i][j]=0;
                else
                    if(s1[i-1]==s2[j-1])
                        dp[i][j]=1+dp[i-1][j-1];
                else
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
       //
        i=m;
        j=n;
        string s;
        while(i>0&&j>0){
            
            if(dp[i-1][j]==dp[i][j-1])
            {
                 s.push_back(s1[i-1]);
                    i--;
                    j--;
            } 
            else
                if(dp[i-1][j]>dp[i][j-1])
                    i--;
            else
                j--;
        }
        reverse(s.begin(), s.end());
        cout<<s;
         return dp[m][n];
    }
};