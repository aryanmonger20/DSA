class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int sum=0,n=nums.size(),c=0;
        
        for(int i=0;i<n;i++){
            if(nums[i]==0)
                c++;
            
            sum+=nums[i];
        }
         if(target>sum || target<-sum||target+sum<0||(target+sum)%2==1) 
            return 0;

        int tar=(target+sum)/2;
        
        int dp[n+1][tar+1];
        dp[0][0]=1;
        for (int i = 1; i <= tar; i++)
        dp[0][i] = 0;
        
    for (int i = 1; i <= n; i++)
        dp[i][0] = 1;
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=tar;j++){
                         if(nums[i-1]==0) 
                             dp[i][j] = dp[i-1][j];
                else
                    if(nums[i-1]<=j){
                        dp[i][j]=dp[i-1][j-nums[i-1]]+dp[i-1][j];
                    }
                else
                    
                    dp[i][j]=dp[i-1][j];
            }
        }
        
        return pow(2,c)*dp[n][tar];
        
    }
};