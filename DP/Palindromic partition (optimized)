class Solution{
public:
int dp[501][501];
bool isPalindrome(string str, int i, int j)
   {
    while (i <= j)
    {
        if (str[i++] != str[j--]) 
            return false;
    }
    return true;
    }
    int fun(string str, int i, int j)
    {
        if(dp[i][j]!=-1)
        return dp[i][j];
        if (i == j || isPalindrome(str, i, j))
        {
            dp[i][j]=0;
             return 0;
        }
        int min = INT_MAX;
        for (int k = i; k <= j-1; k++)
        {
            int right=0;
            if(isPalindrome(str,i,k))
            right=fun(str,k+1,j);
            else
            {
                dp[i][k]=0;
                continue;
            }
            int count = 1 + right;
            if (count < min) 
            min = count;
        }
        return dp[i][j]=min;
    }
    int palindromicPartition(string str)
    {
        memset(dp,-1,sizeof(dp));
        int n=str.length();
        return fun(str,0,n-1);
    }
};
