class Solution 
{
    public:
      queue<pair<int,int>>q;
      
   bool isValid(int x,int y,int n){
        
        if(x>0 && x<=n && y>0 && y<=n)
        return true ;
        else 
        return false;
    }
       
    //Function to find out minimum steps Knight needs to reach target position.
	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&Tar,int N)
	{
	    // Code here
	    queue<pair<pair<int,int>,int>>q;
	    
	   bool vis[N+1][N+1]={false};
	  
	   
	    int edgeX[] = {1, 2, 1, 2, -1, -2, -1, -2};
        int edgeY[] = {2, 1, -2, -1, 2, 1, -2, -1};
	   
	   q.push({{KnightPos[0],KnightPos[1]},0});
	   
	   while(!q.empty()){
	       auto k=q.front();
	       int x1=k.first.first;
	       int y1=k.first.second;
	       int d=k.second;
	       
	       q.pop();
	       if(x1==Tar[0] && y1==Tar[1]){
	           return d;
	       }
	       
	       if(vis[x1][y1]==false)
	       {
	           vis[x1][y1]=true;
	           
	           for(int i=0;i<8;i++){
	               int currx=x1+edgeX[i];
	              int  curry=y1+edgeY[i];
	               
	               if(isValid(currx,curry,N))
	                   q.push({{currx,curry},d+1});
	               
	           }
	       }
	     
	   }
	   
	   return -1;
	}
};