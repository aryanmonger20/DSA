//if asked for the whole triangle
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        
        vector<vector<int>> triangle;
        
	for (int i = 0; i < numRows; i++) {
        //initialising new row;
		vector<int> row(i + 1,1);
        
		for (int j = 1; j < i; j++) {
			row[j] = triangle[i - 1][j] +triangle[i - 1][j - 1];
		}
		triangle.push_back(row);
	}
	return triangle;
    }
};

//if asked for a specific row
vector<ll> nthRowOfPascalTriangle(int n) {
	// code here
	ll mod=1000000007;
	
  vector<ll> ans;
  
  if(n==1)
  {
	 ans.push_back(1);
	 return ans;
  }
   

 vector<ll> last= nthRowOfPascalTriangle(n-1);
  ans.push_back(1);
 for(int i=1;i<n-1;i++)
 {
	 
	 ll k=(last[i]+last[i-1])%mod;
	 ans.push_back(k);
 }
 ans.push_back(1);
 return ans;
 
}

// shortcut soln for specific row is rCn where each element is rC0,rC1...rCn;
class Solution {
	public:
		vector<int> getRow(int r) {
			
			 vector<int>v(r+1);
			
			long temp=1;
			
			v[0]=v[r]=1;
			
			for(int i=1,up=r,down=1; i<r ; i++,up--,down++){
				temp = temp*up/down;
				v[i]=temp;
			}
			return v;
		}
	};