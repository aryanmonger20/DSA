class Solution{
    
    
    bool pelindrome(string s, int i, int j)
        {
            while(i<j)
            {
                if(s[i]!=s[j])
                    return false;
                i++;
                j--;
            }
            return true;
        }

        int solve(string s, int i, int j,int t[][501])
        {
            if(i>=j)
                return 0;
            
            if(pelindrome(s,i,j)==true)
                return 0;
                
            if(t[i][j]!=-1)
                return t[i][j];
            
            int mn = INT_MAX;
            for(int k = i; k<j; k++)
            {
                int left,right;
                if(t[i][k]!=-1)
                    left = t[i][k];
                else
                {
                    left = solve(s,i,k,t);
                    t[i][k] = left;
                }
                if(t[k+1][j]!=-1)
                    right = t[k+1][j];
                else
                {
                    right = solve(s,k+1,j,t);
                    t[k+1][j] = right;
                }
                int temp = 1 + left + right;
                mn = min(mn,temp);
            }
            return t[i][j]=mn;
        }
        
public: 
    int palindromicPartition(string str)
    {
        int static t[501][501];
         memset(t,-1,sizeof(t));
            int j = str.length()-1;
            return solve(str,0,j,t);
    }
};