////recursive///

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int key) {
         if(root==NULL)
    return new TreeNode(key);
    
    if(root->val<key)
    root->right=insertIntoBST(root->right,key);
    else
    if(root->val>key)
    root->left=insertIntoBST(root->left,key);
    
    return root;
    }
};


/////////Iterative//////

class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int key) {
        TreeNode* temp=new TreeNode(key);
        if(root==NULL)
            return temp;
        TreeNode*curr=root;
        TreeNode*parent;
        
        while(curr!=NULL){
            
            parent=curr;
           
            
            if(curr->val>key)
                curr=curr->left;
            else
                if(curr->val<key)
                    curr=curr->right;
            
        }
        
        if(parent==NULL)
            return temp;
        else
            if(parent->val<key)
                parent->right=temp;
        else
            parent->left=temp;
        
            return root;
    }

};