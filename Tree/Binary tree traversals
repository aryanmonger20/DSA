//////////////
Inorder
///////////////

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void solve(TreeNode* root){
       if(root==NULL)
           return;
        
      
            solve(root->left);
        v.push_back(root->val);
        solve(root->right);
        
    }
public: vector<int>v;
    vector<int> inorderTraversal(TreeNode* root) {
        
        solve(root);
        return v;
    }
};

//////////////
Preorder
///////////////


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void solve(TreeNode* root){
       if(root==NULL)
           return;
        
        v.push_back(root->val);
            solve(root->left);
        solve(root->right);
        
    }
public: vector<int>v;
    vector<int> preorderTraversal(TreeNode* root) {
         solve(root);
        return v;
    }
};

//////////////
Postorder
///////////////

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
void solve(TreeNode* root){
       if(root==NULL)
           return;
        
      
            solve(root->left);
        
        solve(root->right);
    v.push_back(root->val);
        
    }
public: vector<int>v;
    vector<int> postorderTraversal(TreeNode* root) {
        
        solve(root);
        return v;
    }
};
