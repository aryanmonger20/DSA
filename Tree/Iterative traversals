/////////Inorder/////////
class Solution {
public:
    vector<int> inOrder(Node* root)
    {
        //code here
        vector<int>ans;
        stack<Node*>s;
        
        while(root!=NULL || s.empty()==false){
           while(root!=NULL)
           { 
              s.push(root);
             root=root->left;
            
        }
      root=s.top();
        s.pop();
        ans.push_back(root->data);
        root=root->right;
        }
        return ans;
       
    }
////////Preorder///////
vector<int> preOrder(Node* root)
{
    //code here
     vector<int>ans;
        stack<Node*>s;
         s.push(root);
        
        while(s.empty()==false){
      
     
           while(root!=NULL)
           
           {  
         
          ans.push_back(root->data);
             s.push(root);
             root=root->left;
            
        }
        root=s.top();
          s.pop();
        root=root->right;
        }
        return ans;
}

////////Postorder///////

vector<int> postOrder(Node* root) {
    // code here
     vector<int>ans;
        stack<Node*>s;
       s.push(root);
        
        while(s.empty()==false){
      
        root=s.top();
          s.pop();
          ans.push_back(root->data);
          
           if(root->left!=NULL)
            s.push(root->left);
        
            if(root->right!=NULL)
            s.push(root->right);
        }
       
        reverse(ans.begin(),ans.end());
        return ans;
}