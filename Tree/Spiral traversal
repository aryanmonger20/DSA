
//use stack to reverse the levels in BFS




/* A binary tree node has data, pointer to left child
   and a pointer to right child  
struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
}; */


//Function to return a list containing the level order traversal in spiral form.
vector<int> findSpiral(Node *root)
{
    //Your code here 
        vector<int>v;
        
        stack<int>s;
        queue<Node*>q;
        q.push(root);
        
        
        bool rev=true;
        
        if(root==NULL)
            return v ;
        
        
        while(q.empty()==false){
            
            int n=q.size();
            
            for(int i=0;i<n;i++){
                Node* curr=q.front();
                
                q.pop();
                
                 if(rev){
                    s.push(curr->data);}
                else
                {
                    v.push_back(curr->data);
                    
                }
                if(curr->left!=NULL)
                    q.push(curr->left);
                
                if(curr->right!=NULL)
                    q.push(curr->right);
            
            }
            if(rev){
                while(s.empty()==false){
                    int k=s.top();
                    v.push_back(k);
                    s.pop();
                    
                }
            }
           rev=!rev;
            
            
        }
         return v;
}